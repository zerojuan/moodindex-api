#!/usr/bin/env node

// Create tables in your local dynamo
const AWS = require( 'aws-sdk' );

AWS.config.update({
  endpoint: 'http://localhost:8000',
  region: 'us-east-2'
});

const db = new AWS.DynamoDB();


db
  .listTables()
  .promise()
  .then( ( res ) => {
    // Delete all tables first
    return Promise.all(
      res.TableNames.map( ( tableName ) => {
        return db.deleteTable( {
          TableName: tableName
        } ).promise()
      } ) );
  } )
  .then( ( res ) => {
    return db.createTable( {
      TableName: 'AccessPolicies',

      AttributeDefinitions: [{
        AttributeName: 'userType',
        AttributeType: 'S'
      }, {
        AttributeName: 'id',
        AttributeType: 'S'
      } ],

      KeySchema: [ {
        AttributeName: 'userType',
        KeyType: 'HASH'
      }, {
        AttributeName: 'id',
        KeyType: 'RANGE'
      } ],

      ProvisionedThroughput: {
        ReadCapacityUnits: 5,
        WriteCapacityUnits: 5
      }
    } ).promise();
  } )
  .then( ( res ) => {
    return db.createTable( {
      TableName: 'Users',

      AttributeDefinitions: [{
        AttributeName: 'id',
        AttributeType: 'S'
      }, {
        AttributeName: 'username',
        AttributeType: 'S'
      } ],

      KeySchema: [ {
        AttributeName: 'id',
        KeyType: 'HASH'
      } ],

      GlobalSecondaryIndexes: [ {
        IndexName: 'usernameIndex',
        KeySchema: [ {
          AttributeName: 'username',
          KeyType: 'HASH'
        } ],
        Projection: {
          NonKeyAttributes: [ 'password' ],
          ProjectionType: 'INCLUDE'
        },
        ProvisionedThroughput: {
          ReadCapacityUnits: 5,
          WriteCapacityUnits: 5
        }
      } ],

      ProvisionedThroughput: {
        ReadCapacityUnits: 5,
        WriteCapacityUnits: 5
      }
    } ).promise();
  } )
  .catch( ( err ) => {
    console.log( 'Error Happened', err );
  } );
